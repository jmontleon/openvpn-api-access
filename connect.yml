- hosts: localhost
  gather_facts: false
  vars_files:
  - config.yml
  tasks:
  - block:
    - name: Create server namespace
      shell: "{{ CloudOC }} new-project {{ namespace }}"
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Start a container to generate certificates
      shell: "{{ CloudOC }} run -n {{ namespace }} openvpn --image=quay.io/jmontleon/openvpn:latest --env EASYRSA_BATCH=1 --command -- sleep infinity"
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Wait for openvpn container to be up
      shell: "{{ CloudOC }} exec -it -n {{ namespace }} openvpn ls"
      register: cmd
      retries: 5
      delay: 10
      until: cmd.rc == 0
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Set up certs
      shell: "{{ CloudOC }} exec -n {{ namespace }} -it openvpn /usr/share/easy-rsa/3/easyrsa {{ item }}"
      with_items:
      - init-pki
      - build-ca nopass
      - gen-req server nopass
      - sign-req server server
      - gen-req client nopass
      - sign-req client client
      - gen-dh
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Copy certs out of the container
      shell: "{{ CloudOC }} cp -n {{ namespace }} openvpn:/pki ./pki"
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Delete openvpn pod
      shell: "{{ CloudOC }} delete po -n {{ namespace }} openvpn"
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Make server secret directory
      file:
        state: directory
        path: pki/server

    - name: Copy certs for server secret
      copy:
       src: "{{ item }}"
       dest: pki/server
      with_items:
      - pki/ca.crt
      - pki/dh.pem
      - pki/issued/server.crt
      - pki/private/server.key

    - name: Create server secret
      shell: "{{ CloudOC }} create secret generic openvpn --from-file=pki/server"
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Render server definition
      template:
        src: openvpn-server.yml.j2
        dest: openvpn-server.yml

    - name: Create server deployment
      shell: "{{ CloudOC }} create -f openvpn-server.yml"
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Gather ca.crt
      slurp:
        src: pki/ca.crt
      register: ca_crt

    - name: Gather client.crt
      slurp:
        src: pki/issued/client.crt
      register: client_crt

    - name: Gather client.key
      slurp:
        src: pki/private/client.key
      register: client_key

    - name: Get opevpn server endpoint
      shell: "{{ CloudOC }} get service openvpn -n {{ namespace }} -o go-template={% raw %}'{{ (index .status.loadBalancer.ingress 0).hostname }}'{% endraw %}"
      register: endpoint
      retries: 5
      delay: 10
      until: endpoint.rc == 0
      environment:
        KUBECONFIG: "{{ CloudKubeConfig }}"

    - name: Render client template
      template:
        src: client.conf.j2
        dest: openvpn.conf

    - name: Create client project
      shell: "{{ OnPremOC }} new-project {{ namespace }}"
      environment:
        KUBECONFIG: "{{ OnPremKubeConfig }}"

    - name: Create client secret
      shell: "{{ OnPremOC }} -n {{ namespace }} create secret generic openvpn --from-file=openvpn.conf"
      environment:
        KUBECONFIG: "{{ OnPremKubeConfig }}"

    - name: Add openvpn SA to privileged SCC
      shell: "{{ OnPremOC }} adm policy add-scc-to-user privileged system:serviceaccount:{{ namespace }}:openvpn"
      environment:
        KUBECONFIG: "{{ OnPremKubeConfig }}"

    - name: Render server definition
      template:
        src: openvpn-client.yml.j2
        dest: openvpn-client.yml

    - name: Create Client deployment
      shell: "{{ OnPremOC }} create -f openvpn-client.yml"
      environment:
        KUBECONFIG: "{{ OnPremKubeConfig }}"

    always:
    - name: Remove pki dir
      file:
        state: absent
        path: pki
        force: true

    - name: Remove rendered templates
      file:
        state: absent
        path: "{{ item }}"
        force: true
      with_items:
      - openvpn.conf
      - openvpn-server.yml
      - openvpn-client.yml
